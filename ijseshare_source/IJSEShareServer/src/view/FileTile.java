/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Color;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.rmi.RemoteException;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;
import rmi.ControllerFileInterface;
import rmi.RemoteFileController;

/**
 *
 * @author ravindu
 */
public class FileTile extends javax.swing.JPanel {

    private MainFrame mainFrame;
    private File file;
    private String path = ".."; //"/home/ravindu/ijseshare";

    /**
     * Creates new form FileTile
     *
     */
    public FileTile() {
        initComponents();
    }

    public FileTile(MainFrame mainFrame, File file) {
        this();
        this.mainFrame = mainFrame;
        this.file = file;
        StringTokenizer st = new StringTokenizer(file.getName(), ".");
        st.nextToken();
        String ext = "";
        while (st.hasMoreTokens()) {
            ext += "." + st.nextToken();
        }
        lblImg.setText(file.getName());
        if (ext.equals(".pdf")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/pdf.png")));
        } else if (ext.equals(".doc")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/writer.png")));
        } else if (ext.equals(".ppt")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/presentation.png")));
        } else if (ext.equals(".c")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/c.png")));
        } else if (ext.equals(".cpp")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/text-x-c++.png")));
        } else if (ext.equals(".php")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/application-x-php.png")));
        } else if (ext.equals(".png")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/image-x-generic.png")));
        } else if (ext.equals(".xml")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/xml.png")));
        } else if (ext.equals(".txt")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/text.png")));
        } else if (ext.equals(".html")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/html.png")));
        } else if (ext.equals(".dia")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/dia.png")));
        } else if (ext.equals(".xls")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/spreadsheet.png")));
        } else if (ext.equals(".zip")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/package-x-generic.png")));
        } else if (ext.equals(".py")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/python.png")));
        } else if (ext.equals(".java")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/text-x-java.png")));
        } else if (ext.equals(".jar")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/application-x-jar.png")));
        } else if (ext.equals(".js")) {
            lblImg.setIcon(new ImageIcon(getClass().getResource("/img/text-x-javascript.png")));
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblImg = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(254, 254, 254));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });

        lblImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/empty.png"))); // NOI18N
        lblImg.setText("FileName.extension");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/close.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/closebig.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 216, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblImg)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(26, 26, 26))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        setBackground(new Color(79, 145, 219));
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        if (getMousePosition() == null) {
            setBackground(Color.white);
        }
    }//GEN-LAST:event_formMouseExited

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        RemoteFileController rfi = (RemoteFileController) mainFrame.getFi();
        boolean deleted = rfi.deleteFile(file);
        if (deleted) {
            mainFrame.addFilesToPanel();
        } else {
            JOptionPane.showMessageDialog(mainFrame, "File not deleted! make sure file is not in use", "error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        mainFrame.addToPanel(new ConnectingFrame());
        mainFrame.repaint();
        mainFrame.revalidate();
        Thread t = new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    byte[] bytes = mainFrame.getFi().downloadFile(file.getName());

                    BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(path + "/downfiles/" + file.getName()));
                    output.write(bytes, 0, bytes.length);
                    output.flush();
                    output.close();
                    System.out.println(file.getParent());
                    Runtime.getRuntime().exec("nautilus " + path + "/downfiles");
                    mainFrame.addFilesToPanel();
                } catch (RemoteException ex) {
                    Logger.getLogger(FileTile.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(FileTile.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        t.start();
    }//GEN-LAST:event_formMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel lblImg;
    // End of variables declaration//GEN-END:variables
}
